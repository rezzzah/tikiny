<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <title>Jeff Print Data</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <meta charset="UTF-8">
  </head>
  <body class="bg-gray-100 flex items-center justify-center min-h-screen">
    <div id="root" class="bg-white p-8 rounded-lg shadow-lg"></div>

    <!-- React, ReactDOM, Babel -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <script type="text/babel">

const FlipCard = React.forwardRef(
        (
          {
            alt,
            initialWidth = "300px",
            initialHeight = "400px",
            defaultImage,
            onImageChange,
            designName = "Design Name",
            colors = "Available Colors",
            priceA = "$99.99",
            priceB = "$149.99", 
            priceC = "$199.99",
            colorCode = "S0",
            colorName = "DefaultName"
          },
          ref
        ) => {
          const [width, setWidth] = React.useState(initialWidth);
          const [height, setHeight] = React.useState(initialHeight);
          const [internalImage, setInternalImage] = React.useState(defaultImage);
          const [loading, setLoading] = React.useState(true);
          const [progress, setProgress] = React.useState(0);
          const [isFlipped, setIsFlipped] = React.useState(false);
          const [isInView, setIsInView] = React.useState(false);
          const [imageLoaded, setImageLoaded] = React.useState(false);
          const [imageError, setImageError] = React.useState(false);
          const [isFading, setIsFading] = React.useState(false);
          const [prevImage, setPrevImage] = React.useState(null);
          const [showNew, setShowNew] = React.useState(false);
          const [fadeIn, setFadeIn] = React.useState(false);
          const [showSpinner, setShowSpinner] = React.useState(false);
  
          // Intersection Observer for lazy loading
          const cardRef = React.useRef();
  
          React.useEffect(() => {
            const observer = new IntersectionObserver(
              ([entry]) => {
                if (entry.isIntersecting) {
                  setIsInView(true);
                  observer.disconnect(); // Only load once
                }
              },
              {
                rootMargin: '50px', // Start loading 50px before the element comes into view
                threshold: 0.1
              }
            );
  
            if (cardRef.current) {
              observer.observe(cardRef.current);
            }
  
            return () => observer.disconnect();
          }, []);
  
          // Use either controlled image (from props) or internal state
          const image = defaultImage !== undefined ? defaultImage : internalImage;
  
          // Keep track of previous image to detect change
          const prevImageRef = React.useRef(image);
  
          // When image changes, reset flip to normal
          React.useEffect(() => {
            if (prevImageRef.current !== image) {
              setIsFlipped(false);
              prevImageRef.current = image;
              setImageLoaded(false);
            }
          }, [image]);
  
          // Simulate loading progress only when in view
          React.useEffect(() => {
            if (isInView && !imageLoaded) {
              setLoading(true);
              setProgress(0);
              let interval;
              let current = 0;
              interval = setInterval(() => {
                current += Math.floor(Math.random() * 15) + 5;
                if (current >= 90) {
                  current = 90;
                  clearInterval(interval);
                }
                setProgress(current);
              }, 80);
              return () => clearInterval(interval);
            }
          }, [image, isInView, imageLoaded]);
  
          // When image is loaded, set loading to false and progress to 100
          const handleImageLoad = () => {
            setImageLoaded(true);
            setProgress(100);
            setFadeIn(true);
            setTimeout(() => setLoading(false), 200);
          };
  
          // Expose methods to parent via ref
          React.useImperativeHandle(ref, () => ({
            goToNextImage() {
              setInternalImage(defaultImage);
              if (onImageChange) onImageChange(defaultImage);
            },
            setImage(newImage) {
              setFadeIn(false);
              setInternalImage(newImage);
              if (onImageChange) onImageChange(newImage);
            },
            flipCard() {
              setIsFlipped(f => !f);
            },
            showSpinner: () => setShowSpinner(true),
            hideSpinner: () => setShowSpinner(false)
          }));
  
          // ปิดการ flip card สำหรับโปรเจคนี้
          const handleCardClick = () => {};
  
          // Reset error when image or isInView changes
          React.useEffect(() => {
            setImageError(false);
          }, [image, isInView]);
  
          return (
            <div
              ref={cardRef}
              className="relative w-fit shadow-xl rounded-2xl border-4 border-white/60 bg-gradient-to-br from-blue-50 to-white overflow-hidden transition-all duration-200 hover:border-black"
              style={{
                width: typeof width === "number" ? `${width}px` : width,
                height: typeof height === "number" ? `${height}px` : height,
                display: "inline-block",
                position: "relative",
                perspective: "1000px"
              }}
              // ปิดการ flip card
              onClick={() => {}}
            >
              <div
                className="relative w-full h-full transition-transform duration-700 ease-in-out"
                style={{
                  transformStyle: "preserve-3d",
                  transform: isFlipped ? "rotateY(180deg)" : "rotateY(0deg)"
                }}
              >
                {/* Front side - Image */}
                <div
                  className="absolute inset-0 w-full h-full backface-hidden"
                  style={{ backfaceVisibility: "hidden" }}
                >
                  {(!isInView || loading) && !imageError && (
                    <div className="absolute inset-0 flex flex-col items-center justify-center z-20 bg-white bg-opacity-80 rounded-2xl backdrop-blur-sm">
                      {!isInView ? (
                        <span className="text-base font-medium text-gray-600 flex items-center gap-2">
                          <svg className="animate-pulse h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                          </svg>
                          Scroll to view...
                        </span>
                      ) : (
                        <>
                          <span className="text-base font-medium text-blue-600 flex items-center gap-2">
                            <svg className="animate-spin h-4 w-4 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                            </svg>
                            Loading image...
                          </span>
                        </>
                      )}
                    </div>
                  )}
                  {isInView && (
                    <>
                      {/* Spinner overlay เฉพาะเมื่อ showSpinner เป็น true */}
                      {showSpinner && (
                        <div className="absolute inset-0 flex items-center justify-center z-40 pointer-events-none bg-black/60">
                          <div className="animate-spin w-12 h-12 rounded-full border-4 border-white border-t-transparent"></div>
                        </div>
                      )}
                      {!imageError && (
                        <img
                          src={image}
                          alt={alt}
                          width={width}
                          height={height}
                          className={`
                            transition-all duration-[2000ms] ease-[cubic-bezier(0.4,0,0.2,1)]
                            transition-opacity duration-[2000ms]
                            ${fadeIn ? 'opacity-100' : 'opacity-0'}
                            ${loading ? "blur-[1.5px] scale-95" : "blur-0"}
                            rounded-t-2xl
                            cursor-pointer
                            object-cover
                            w-full
                            h-full
                            select-none
                          `}
                          style={{
                            pointerEvents: loading ? "none" : "auto",
                            userSelect: "none"
                          }}
                          onLoad={handleImageLoad}
                          onError={() => setImageError(true)}
                          draggable={false}
                          loading="lazy"
                        />
                      )}
                      {imageError && (
                        <div className="absolute inset-0 flex flex-col items-center justify-center z-30 bg-white bg-opacity-80 rounded-2xl transition-all duration-500 ease-out opacity-100 animate-fade-slide-down">
                          <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <polygon points="24,6 46,42 2,42" fill="#FACC15" stroke="#F59E42" strokeWidth="2"/>
                            <text x="24" y="34" textAnchor="middle" fontSize="18" fill="#B45309" fontWeight="bold">!</text>
                          </svg>
                          <span className="mt-2 text-yellow-700 font-semibold text-base">ไม่พบรูปภาพ</span>
                        </div>
                      )}
                    </>
                  )}
                </div>
  
                {/* Back side - Details */}
                <div
                  className="absolute inset-0 w-full h-full backface-hidden bg-gradient-to-br from-blue-50 to-white rounded-2xl p-6 flex flex-col justify-center items-center text-center"
                  style={{ 
                    backfaceVisibility: "hidden",
                    transform: "rotateY(180deg)"
                  }}
                >
                  <div className="space-y-4">
                    <h3 className="text-xl font-bold text-gray-800">{designName}</h3>
                    <p className="text-sm text-gray-600">{colors}</p>
                    <div className="space-y-2">
                      <div className="text-lg font-semibold text-blue-600">{priceA}</div>
                      <div className="text-lg font-semibold text-green-600">{priceB}</div>
                      <div className="text-lg font-semibold text-purple-600">{priceC}</div>
                    </div>
                    <p className="text-xs text-gray-500 mt-4">Click to flip back</p>
                  </div>
                </div>
              </div>
            </div>
          );
        }
      );

      
      function JeffPrintComponent() {
        const [data, setData] = React.useState([]);
        const [isLoading, setIsLoading] = React.useState(true);
        const [error, setError] = React.useState("");
        const [currentPage, setCurrentPage] = React.useState(1);
        const itemsPerPage = 50;
        const [filter, setFilter] = React.useState('all');
        const [refreshFlag, setRefreshFlag] = React.useState(false);
        const flipCardRefs = React.useRef([]);
        const [justApprovedKeys, setJustApprovedKeys] = React.useState([]);

        // ใส่ URL ของ Apps Script ของคุณ
        const apiUrl = "https://script.google.com/macros/s/AKfycbwB9tUS7pHLR3GYOaik6pYj1_RWAPa4EEwplaV7F9hcv2oHRY0y0DkgdIdo-NgjPf3C/exec?action=getJeffPrintData";
        const toggleUrl = "https://script.google.com/macros/s/AKfycbwB9tUS7pHLR3GYOaik6pYj1_RWAPa4EEwplaV7F9hcv2oHRY0y0DkgdIdo-NgjPf3C/exec?action=toggleApproved&key=";

        React.useEffect(() => {
          setIsLoading(true);
          fetch(apiUrl)
            .then(res => res.json())
            .then(json => {
              if (Array.isArray(json) && json.length > 1) {
                const headers = json[0];
                const rows = json.slice(1);
                const cleanData = rows.map(row => {
                  const obj = {};
                  headers.forEach((header, idx) => {
                    let val = row[idx];
                    if (typeof val === "string" && val.startsWith('"') && val.endsWith('"')) {
                      val = val.substring(1, val.length - 1);
                    }
                    obj[header] = val;
                  });
                  return obj;
                });
                setData(cleanData);
              } else {
                setData([]);
              }
            })
            .catch(err => setError("เกิดข้อผิดพลาดในการโหลดข้อมูล: " + err.message))
            .finally(() => setIsLoading(false));
        }, [refreshFlag]);

        // ฟังก์ชัน toggle approved (update badge ทันที)
        const handleToggleApproved = (key, idx) => {
          // แสดง spinner เฉพาะใบที่คลิก
          if (flipCardRefs.current[idx] && flipCardRefs.current[idx].showSpinner) {
            flipCardRefs.current[idx].showSpinner();
          }
          fetch(toggleUrl + encodeURIComponent(key))
            .then(() => {
              setData(prevData => {
                const newData = prevData.map(row => {
                  if (row.key === key) {
                    const wasApproved = row.approved === "1";
                    const newApproved = wasApproved ? "0" : "1";
                    // ถ้าเพิ่งเปลี่ยนเป็น approved ให้เพิ่ม key ใน justApprovedKeys
                    if (!wasApproved && newApproved === "1") {
                      setJustApprovedKeys(prev => [...prev, key]);
                    }
                    return { ...row, approved: newApproved };
                  }
                  return row;
                });
                return newData;
              });
            })
            .finally(() => {
              if (flipCardRefs.current[idx] && flipCardRefs.current[idx].hideSpinner) {
                flipCardRefs.current[idx].hideSpinner();
              }
            });
        };

        // ลบ key ออกจาก justApprovedKeys หลังแสดง animation แล้ว
        React.useEffect(() => {
          if (justApprovedKeys.length > 0) {
            const timeout = setTimeout(() => {
              setJustApprovedKeys([]);
            }, 600); // นานกว่า animation เล็กน้อย
            return () => clearTimeout(timeout);
          }
        }, [justApprovedKeys]);

        // Pagination logic
        const reversedData = data.slice().reverse();
        const filteredData = filter === 'approved'
          ? reversedData.filter(row => row.approved === "1")
          : reversedData;
        const totalPages = Math.ceil(filteredData.length / itemsPerPage);
        const startIdx = (currentPage - 1) * itemsPerPage;
        const endIdx = startIdx + itemsPerPage;
        const pageData = filteredData.slice(startIdx, endIdx);

        // Scroll to top when page changes
        React.useEffect(() => {
          window.scrollTo({ top: 0, behavior: 'smooth' });
        }, [currentPage]);

        return (
          <div className="w-[90vw] flex flex-col items-center justify-center">
            <h1 className="text-3xl font-bold text-gray-800 mb-6">Jeff Print Data</h1>
            <div className="mb-4 flex items-center gap-2 w-full justify-end">
              <label htmlFor="filter" className="font-medium text-gray-700">แสดง:</label>
              <select
                id="filter"
                className="border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:border-blue-400"
                value={filter}
                onChange={e => { setFilter(e.target.value); setCurrentPage(1); }}
              >
                <option value="all">ทั้งหมด</option>
                <option value="approved">เฉพาะที่อนุมัติแล้ว</option>
              </select>
            </div>
            {isLoading ? (
              <div className="flex items-center justify-center py-6">
                <svg className="animate-spin h-6 w-6 text-blue-500 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
                </svg>
                <span>กำลังโหลดข้อมูล...</span>
              </div>
            ) : error ? (
              <div className="text-red-600">{error}</div>
            ) : (
              <>
                <div className="flex flex-wrap gap-6 w-[90vw] justify-center items-start">
                  {pageData.length === 0 ? (
                    <div className="w-full text-center text-gray-500 py-4">ไม่พบข้อมูล</div>
                  ) : (
                    pageData.map((row, idx) => (
                      <div key={idx} className="relative" onClick={() => handleToggleApproved(row.key, idx)} style={{cursor:'pointer'}}>
                        <span className="absolute -top-4 left-1/2 -translate-x-1/2 bg-yellow-400 text-black text-lg font-extrabold px-5 py-2 rounded-full border-4 border-yellow-600 shadow-2xl z-30 select-none drop-shadow-lg">
                          {row.key}
                        </span>
                        {(row.selected === "1" || row.approved === "1") && (
                          <div className="absolute bottom-4 right-2 flex flex-col items-end gap-2 z-30">
                            {row.selected === "1" && (
                              <span className="bg-green-500 border-2 border-green-700 text-white text-base font-extrabold px-4 py-2 rounded-full shadow select-none">
                                เคยสั่งซื้อแล้ว
                              </span>
                            )}
                            {row.approved === "1" && (
                              <span className={
                                `bg-blue-500 border-2 border-blue-700 text-white text-base font-extrabold px-4 py-2 rounded-full shadow select-none ` +
                                (justApprovedKeys.includes(row.key) ? 'animate-[stamp_0.5s_ease]' : '')
                              }>
                                อนุมัติแล้ว
                              </span>
                            )}
                          </div>
                        )}
                        <FlipCard
                          ref={el => flipCardRefs.current[idx] = el}
                          defaultImage={row.url}
                          designName={row.key}
                          colors={row.selected}
                          alt={row.key}
                          initialWidth="300px"
                          initialHeight="300px"
                        />
                      </div>
                    ))
                  )}
                </div>
                {/* Pagination controls */}
                {totalPages > 1 && (
                  <div className="flex justify-center items-center gap-4 mt-8">
                    <button
                      className="px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
                      onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                      disabled={currentPage === 1}
                    >
                      ก่อนหน้า
                    </button>
                    <span className="font-bold text-lg">หน้า {currentPage} / {totalPages}</span>
                    <button
                      className="px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
                      onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                      disabled={currentPage === totalPages}
                    >
                      ถัดไป
                    </button>
                    <button
                      className="px-4 py-2 bg-blue-700 text-white rounded disabled:opacity-50"
                      onClick={() => setCurrentPage(totalPages)}
                      disabled={currentPage === totalPages}
                    >
                      ไปหน้าสุดท้าย
                    </button>
                  </div>
                )}
              </>
            )}
          </div>
        );
      }

      function App() {
        return (
          <div className="flex flex-start justify-center space-y-6 p-4">
            <JeffPrintComponent />
          </div>
        );
      }

      const rootElement = document.getElementById('root');
      if (rootElement) {
        const root = ReactDOM.createRoot(rootElement);
        root.render(
          <React.StrictMode>
            <App />
          </React.StrictMode>
        );
      }
    </script>
    <style>
    @keyframes stamp {
      0% {
        transform: scale(2) rotate(-12deg);
        opacity: 0;
        filter: blur(4px);
      }
      60% {
        transform: scale(1) rotate(2deg);
        opacity: 1;
        filter: blur(0);
      }
      80% {
        transform: scale(1.05) rotate(-2deg);
      }
      100% {
        transform: scale(1) rotate(0deg);
      }
    }
    </style>
  </body>
</html>
